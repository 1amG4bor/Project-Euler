package projects;

class ProjectsTo10 {
    private static final ProjectsTo10 instance = new ProjectsTo10();

    private ProjectsTo10() {}

    static ProjectsTo10 getInstance() {
        return instance;
    }

    int getSize() {
        return 10;
    }

    void getProject(int n) {
        System.out.println("\tProject-" + n);
        System.out.print("\tTask: ");
        switch (n) {
            case 1:
                System.out.println("Find the sum of all the multiples of 3 or 5 below 1000.");
                System.out.printf("\t\u00BB Result: " + "%,d", sumOfMultiplies(3, 5, 1_000));
                break;
            case 2:
                System.out.println("By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.");
                System.out.printf("\t\u00BB Result: " + "%,d", sumOfEvenFibonacciSequence(4_000_000));
                break;
            case 3:
                System.out.println("What is the largest prime factor of the number '600,851,475,143'?");
                System.out.printf("\t\u00BB Result: " + "%,d", largestPrimeFactor(600_851_475_143L));
                break;
            case 4:
                System.out.println("Find the largest palindrome made from the product of two 3-digit numbers.");
                System.out.printf("\t\u00BB Result: " + "%,d", palindromeProduct(999, 999));
                break;
            case 5:
                System.out.println("What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?");
                System.out.printf("\t\u00BB Result: " + "%,d", smallestNumberThatDivisibleByAll(20));
                break;
            case 6:
                System.out.println("Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.");
                System.out.printf("\t\u00BB Result: " + "%,d", difference_SumOfSqr_and_SqrOfSum(100));
                break;
            case 7:
                System.out.println("What is the 10,001st prime number?");
                System.out.printf("\t\u00BB Result: " + "%,d", n_thPrime(10_001));
                break;
            case 8:
                System.out.println("Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?");
                System.out.printf("\t\u00BB Result: " + "%,d", greatestProductOf13Adjacent());
                break;
            case 9:
                System.out.println("There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.");
                System.out.printf("\t\u00BB Result: " + "%,d", productOfPythagoreanTriplet(1_000));
                break;
            case 10:
                System.out.println("Find the sum of all the primes below two million.");
                System.out.printf("\t\u00BB Result: " + "%,d", sumOfPrimesBelow(2_000_000));
        }
    }

    // Project 1:
    /**
     * If we map all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
     * Find the sum of all the multiples of 3 or 5 below 1000.
     * @param a     first multiplier
     * @param b     second multiplier
     * @param below limit number (exclusive)
     * @return the sum of all the multiples of 'param a' or 'param b' below 'param below'
     */
    private int sumOfMultiplies(int a, int b, int below) {
        int sum = 0;
        for (int i = a; i < below; i++) {
            if (i % a == 0 || i % b == 0) sum += i;
        }
        return sum;
    }

    // Project 2:
    /**
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
     * @param until limit number (exclusive)
     * @return the sum of the even-valued fibonacci numbers up to 'param until'
     */
    private int sumOfEvenFibonacciSequence(int until) {
        int n_2 = 1;
        int n_1 = 2;
        int sum = 0;

        int n = 2;
        while (n < until) {
            if (n % 2 == 0) sum += n;
            n = n_1 + n_2;
            n_2 = n_1;
            n_1 = n;
        }
        return sum;
    }

    // Project 3:
    /**
     * The prime factors of 13195 are 5, 7, 13 and 29.
     * What is the largest prime factor of the number '600,851,475,143'?
     * @param n we look for the largest prime factor of this number
     * @return the largest prime factor
     */
    private long largestPrimeFactor(long n) {
        long largest = 0;
        for (long i = 2; i <= n; i++) {
            if (isPrime(i) && n % i == 0) {
                largest = i;
                n = n / i;
            }
        }
        return largest;
    }

    // Project 4:
    /**
     * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
     * Find the largest palindrome made from the product of two 3-digit numbers.
     * @param a first 3-digit number
     * @param b second 3-digit number
     * @return value of largest palindrome made from the params
     */
    private int palindromeProduct(int a, int b) {
        int largest = 0;

        for (int i = 1; i <= a; i++) {
            for (int j = 1; j <= b; j++) {
                if (isPalindrome(i * j) && i * j > largest) largest = i * j;
            }
        }
        return largest;
    }

    // Project 5:
    /**
     * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
     * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
     * @param n limit number (inclusive)
     * @return the smallest positive number that is evenly divisible by all of the numbers from 1 to 'param n'
     */
    private int smallestNumberThatDivisibleByAll(int n) {
        int result = 2;
        boolean flag = false;

        next:
        while (!flag) {
            for (int i = 2; i <= n; i++) {
                if (result % i != 0) {
                    result++;
                    continue next;
                }
            }
            flag = true;
        }
        return result;
    }

    // Project 6:
    /**
     * The sum of the squares of the first ten natural numbers is,
     * 1^2 + 2^2 + ... + 10^2 = 385
     * The square of the sum of the first ten natural numbers is,
     * (1 + 2 + ... + 10)^2 = 55^2 = 3025
     * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
     * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
     * @param n limit number (inclusive)
     * @return the difference between the sum of the squares of the first 'param n' natural numbers and the square of the sum.
     */
    private int difference_SumOfSqr_and_SqrOfSum(int n) {
        int sumOfSqr = 0;
        int sqrOfSum = 0;
        for (int i = 1; i <= n; i++) {
            sumOfSqr += i * i;
            sqrOfSum += i;
        }
        sqrOfSum *= sqrOfSum;
        return sqrOfSum - sumOfSqr;
    }

    // Project 7:
    /**
     * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
     * What is the 10,001st prime number?
     * @param p is the number of prime we are looking for
     * @return the n-th prime number
     */
    private int n_thPrime(int p) {
        int counter = 0;
        int n = 1;
        while (counter != p) {
            n++;
            for (int i = 2; i <= n; i++) {
                if (n % i == 0) {
                    if (i == n) counter++;
                    else break;
                }
            }
        }
        return n;
    }

    // Project 8:
    /**
     * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
     * 73167176531330624919225119674426574742355349194934...
     * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
     * @return the greatest product!
     */
    private long greatestProductOf13Adjacent() {
        String line =   "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843" +
                        "8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557" +
                        "6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749" +
                        "3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776" +
                        "6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397" +
                        "5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474" +
                        "8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586" +
                        "1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408" +
                        "0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606" +
                        "0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

        long largest = 0;
        for (int i = 0; i <= 987; i++) {
            long n = Long.parseLong(line.substring(i,i+1));
            for (int j = i+1; j <  i+13 ; j++) {
                n *= Long.parseLong(line.substring(j,j+1));
            }
            if (n>largest) largest = n;
        }
        return largest;
    }

    // Project 9:
    /**
     * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a2 + b2 = c2
     * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
     * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
     * Find the product abc.
     * @param n is the sum of the Pythagorean triplet what numbers we looking for
     * @return the product abc.
     */
    private int productOfPythagoreanTriplet(int n) {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n-i; j++) {
                for (int k = 1; k <= n-i-j; k++) {
                    if (i+j+k==n && i<j & j<k) {
                        if (i*i + j*j == k*k) {
                            System.out.println("\tThe Pythagorean Triple is [a,b,c]: " + i + ", " + j + ", " + k);
                            return i * j * k;
                        }
                    }
                }
            }
        }
        return -1;
    }

    // Project 10:
    /**
     *The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
     * Find the sum of all the primes below two million.
     * @param n limit number (exclusive)
     * @return the sum of all primes up to 'param n'
     */
    private long sumOfPrimesBelow(int n) {
        long sum = 2;
        for (int i = 3; i < n; i=i+2) {
            if (isPrime(i)) sum += i;
//            System.out.println("["+i+"] -> sum = " + sum);
        }
        return sum;
    }

    // region ### Service-methods & algorithms ###
    private boolean isPrime(long n) {
        if (n < 2) return false;
        if (n==2) return true;
        for (long i = 3; i*i <= n; i+=2) {
            if (n % i == 0) return false;
        }
        return true;
    }

    private boolean isPalindrome(int n) {
        StringBuilder sb = new StringBuilder(String.valueOf(n));
        return sb.toString().equals(sb.reverse().toString());
    }
    // endregion
}
